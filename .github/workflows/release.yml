name: Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create changelog
        id: changelog
        run: |
          # Simple conventional commit based bump (fallback to patch)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          COMMITS=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD)
          echo "Commits since last tag:\n$COMMITS"
          BUMP="patch"
          if echo "$COMMITS" | grep -E '^feat' > /dev/null; then BUMP="minor"; fi
          if echo "$COMMITS" | grep -E 'BREAKING CHANGE' > /dev/null; then BUMP="major"; fi
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          IFS='.' read -r MAJ MIN PAT <<< "$CURRENT_VERSION"
          if [ "$BUMP" = "major" ]; then MAJ=$((MAJ+1)); MIN=0; PAT=0; fi
          if [ "$BUMP" = "minor" ]; then MIN=$((MIN+1)); PAT=0; fi
          if [ "$BUMP" = "patch" ]; then PAT=$((PAT+1)); fi
          NEW_VERSION="$MAJ.$MIN.$PAT"
          echo "New version: $NEW_VERSION"
          npm version $NEW_VERSION --no-git-tag-version

          DATE=$(date +%Y-%m-%d)
          {
            echo "## $NEW_VERSION ($DATE)";
            echo "";
            echo "$COMMITS" | sed 's/^/- /';
            echo "";
            cat CHANGELOG.md;
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

          git add package.json CHANGELOG.md
          git commit -m "chore: release $NEW_VERSION"
          git tag "v$NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Push changes and tags
        run: |
          git push origin HEAD:master --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.changelog.outputs.version }}
          name: v${{ steps.changelog.outputs.version }}
          body: |
            See CHANGELOG.md for details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
